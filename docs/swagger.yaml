basePath: /
definitions:
  server.FailureResponse400:
    properties:
      code:
        example: 400
        type: integer
      data:
        example: "null"
        type: string
      msg:
        example: 语法无效
        type: string
    type: object
  server.FailureResponse401:
    properties:
      code:
        example: 401
        type: integer
      data:
        example: "null"
        type: string
      msg:
        example: 权限不足
        type: string
    type: object
  server.FailureResponse422:
    properties:
      code:
        example: 422
        type: integer
      data:
        example: "null"
        type: string
      msg:
        example: 无法处理
        type: string
    type: object
  server.FailureResponse500:
    properties:
      code:
        example: 500
        type: integer
      data:
        example: "null"
        type: string
      msg:
        example: 服务器内部错误
        type: string
    type: object
  server.SuccessResponse200:
    properties:
      code:
        example: 200
        type: integer
      data: {}
      msg:
        example: 操作成功
        type: string
    type: object
host: 8.142.115.160:5930
info:
  contact:
    email: 972576519@qq.com
    name: aken
    url: https://github.com/ChenKen9869
  description: golang-backend interface
  license:
    name: license(Mandatory)
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Intelligent Pasture Backend APIs
  version: version(1.0)
paths:
  /biology/create:
    post:
      consumes:
      - multipart/form-data
      description: 'create biology : 创建一个生物 参数列表：[生物名称、生物类别、该生物所在的牧舍ID、出生日期、性别] 访问携带token'
      parameters:
      - description: biology name
        in: formData
        name: BiologyName
        required: true
        type: string
      - description: biology type
        in: formData
        name: BiologyType
        required: true
        type: string
      - description: company id(farmhouse id)
        in: formData
        name: CompanyId
        required: true
        type: string
      - description: biology birthday
        in: formData
        name: Birthday
        required: true
        type: string
      - description: biology gender
        in: formData
        name: Gender
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/create_epidemic_prevention_record:
    post:
      consumes:
      - multipart/form-data
      description: 'create biology epidemic prevention record : 新增生物的防疫记录 参数列表：[生物ID、本次使用的疫苗信息记录（疫苗描述信息）、注射时间]
        访问携带token'
      parameters:
      - description: biology id
        in: formData
        name: BiologyId
        required: true
        type: integer
      - description: vaccine description
        in: formData
        name: VaccineDescription
        required: true
        type: string
      - description: inoculation time
        in: formData
        name: InoculationTime
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/create_medical_record:
    post:
      consumes:
      - multipart/form-data
      description: 'create biology medical record : 新增生物的用药记录（新增病历） 参数列表：[生物ID、疾病描述、患病时间、治疗方案]
        访问携带token'
      parameters:
      - description: biology id
        in: formData
        name: BiologyId
        required: true
        type: integer
      - description: disease
        in: formData
        name: Disease
        required: true
        type: string
      - description: illness time
        in: formData
        name: IllnessTime
        required: true
        type: string
      - description: treatment plan
        in: formData
        name: TreatmentPlan
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/create_operation_record:
    post:
      consumes:
      - multipart/form-data
      description: 'create biology operation record : 新增生物的手术记录 参数列表：[生物ID、手术医生、手术时间、过程记录、手术结果]
        访问携带token'
      parameters:
      - description: biology id
        in: formData
        name: BiologyId
        required: true
        type: integer
      - description: doctor
        in: formData
        name: Doctor
        required: true
        type: string
      - description: operation time
        in: formData
        name: OperationTime
        required: true
        type: string
      - description: process description
        in: formData
        name: ProcessDescription
        required: true
        type: string
      - description: result
        in: formData
        name: Result
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/create_type:
    post:
      consumes:
      - multipart/form-data
      description: 'create biology type : 创建生物类型 参数列表：[生物类型名称]'
      parameters:
      - description: type name
        in: formData
        name: BiologyTypeId
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/delete:
    delete:
      consumes:
      - application/json
      description: 'delete biology : 删除一个生物 参数列表：[本次删除的操作人员姓名，操作人员的联系方式，生物的去处（病死，屠宰场。卖出
        等），生物ID] 访问携带token'
      parameters:
      - description: name of operator
        in: query
        name: Operator
        required: true
        type: string
      - description: telephone number of operator
        in: query
        name: TelephonNumber
        required: true
        type: string
      - description: leave place
        in: query
        name: LeavePlace
        required: true
        type: string
      - description: id
        in: query
        name: Id
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/delete_type:
    delete:
      consumes:
      - application/json
      description: 'delete biology type : 删除生物类型 参数列表：[生物类型名称] 访问携带token'
      parameters:
      - description: type name
        in: query
        name: BiologyTypeId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/get_auth_list:
    get:
      consumes:
      - application/json
      description: 'get user''s auth biology list : 获取当前用户有权限的所有生物信息 参数列表：[] 访问携带token'
      parameters:
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/get_epidemic_prevention_record_list:
    get:
      consumes:
      - application/json
      description: 'get epidemic prevention record list of biology : 获取生物的防疫信息记录列表
        参数列表：[生物ID] 访问携带token'
      parameters:
      - description: biology id
        in: query
        name: BiologyId
        required: true
        type: integer
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/get_info:
    get:
      consumes:
      - application/json
      description: 'get picture of biology : 获取生物的详细信息 参数列表：[生物ID] 访问携带token'
      parameters:
      - description: biology id
        in: query
        name: BiologyId
        required: true
        type: integer
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/get_list:
    get:
      consumes:
      - application/json
      description: 'get all biologies of farmhouse : 通过牧舍ID获取其中的所有生物组成的列表 参数列表：[牧舍ID]
        访问携带token'
      parameters:
      - description: company id
        in: query
        name: CompanyId
        required: true
        type: integer
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/get_medical_record_list:
    get:
      consumes:
      - application/json
      description: 'get medical record list of biology : 获取生物的病历列表 参数列表：[生物ID] 访问携带token'
      parameters:
      - description: biology id
        in: query
        name: BiologyId
        required: true
        type: integer
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/get_operation_record_list:
    get:
      consumes:
      - application/json
      description: 'get operation record list of biology : 获取生物的手术记录列表 参数列表：[生物ID]
        访问携带token'
      parameters:
      - description: biology id
        in: query
        name: BiologyId
        required: true
        type: integer
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/get_picture:
    get:
      consumes:
      - application/json
      description: 'get picture of biology : 获取生物的照片（获取生物照片的 bytes 形式）参数列表：[生物ID]
        访问携带token'
      parameters:
      - description: biology id
        in: query
        name: BiologyId
        required: true
        type: integer
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/get_picture_path:
    get:
      consumes:
      - application/json
      description: 'get static picture path of biology : 获取生物的照片（获取生物照片在服务器中的静态资源地址）
        参数列表：[生物ID] 访问携带token'
      parameters:
      - description: biology id
        in: query
        name: BiologyId
        required: true
        type: integer
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/get_with_device_list:
    get:
      consumes:
      - application/json
      description: 'get all biologies with devices of company : 根据农牧场ID获取其中所有携带有便携式设备的生物所组成的列表（包括每个生物对应的设备信息）
        参数列表：[农牧场ID] 访问携带token'
      parameters:
      - description: company id
        in: query
        name: CompanyId
        required: true
        type: integer
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/own_list:
    get:
      consumes:
      - application/json
      description: 'get own biology list : 获取当前用户拥有的所有生物信息 参数列表：[] 访问携带token'
      parameters:
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/update_farmhouse:
    put:
      consumes:
      - application/json
      description: 'update biology farmhouse : 更新生物所属的牧舍（转舍） 参数列表：[本次转舍的操作人员姓名、操作人员联系方式、生物ID、生物的目的牧舍ID]
        访问携带token'
      parameters:
      - description: name of operator
        in: formData
        name: Operator
        required: true
        type: string
      - description: telephone number of operator
        in: formData
        name: TelephonNumber
        required: true
        type: string
      - description: biology id
        in: formData
        name: BiologyId
        required: true
        type: integer
      - description: farmhouse id
        in: formData
        name: FarmhouseId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /biology/update_picture:
    post:
      consumes:
      - application/json
      description: 'update biology picture : 上传（更新）生物的照片 参数列表：[生物ID、照片文件] 访问携带token'
      parameters:
      - description: biology id
        in: formData
        name: BiologyId
        required: true
        type: integer
      - description: new picture
        in: formData
        name: BiologyPicture
        required: true
        type: file
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Biology
  /company/company_user/create:
    post:
      consumes:
      - multipart/form-data
      description: 'add company auth to user : 为指定用户分配指定公司的权限（接口访问者需要事先拥有该公司的权限） 参数列表：[公司ID、用户ID]
        访问携带token'
      parameters:
      - description: company id
        in: formData
        name: CompanyId
        required: true
        type: string
      - description: user id
        in: formData
        name: UserId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Company
  /company/company_user/delete:
    delete:
      consumes:
      - application/json
      description: 'delete company auth of user : 从指定用户处收回指定公司的权限 参数列表：[公司ID、用户ID]
        访问携带token'
      parameters:
      - description: company id
        in: query
        name: CompanyId
        required: true
        type: integer
      - description: user id
        in: formData
        name: UserId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Company
  /company/create:
    post:
      consumes:
      - multipart/form-data
      description: 'create company : 创建一个公司 参数列表：[公司名称、该公司的父公司ID（root公司的父公司ID填写0）、该公司的地理位置信息描述（前端自己决定格式，具体看第三方天气定位等服务的接口要求，后端只负责保存地理信息，不做其他处理）]
        访问携带token'
      parameters:
      - description: company_name
        in: formData
        name: Name
        required: true
        type: string
      - description: parent id
        in: formData
        name: ParentId
        required: true
        type: string
      - description: location
        in: formData
        name: Location
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Company
  /company/delete:
    delete:
      consumes:
      - application/json
      description: 'delete company : 删除一个公司 参数列表：[公司ID] 访问携带token'
      parameters:
      - description: company id
        in: query
        name: CompanyId
        required: true
        type: integer
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Company
  /company/get/employeelist:
    get:
      consumes:
      - application/json
      description: 'get employee list of company : 获取公司的员工列表 参数列表：[公司ID] 访问携带token'
      parameters:
      - description: company id
        in: query
        name: CompanyId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Company
  /company/get/info:
    get:
      consumes:
      - application/json
      description: 'get company information : 获取公司的详细信息 参数列表：[公司ID] 访问携带token'
      parameters:
      - description: company id
        in: query
        name: CompanyId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Company
  /company/get/own_list:
    get:
      consumes:
      - application/json
      description: 'get own company list : 获取当前用户拥有的公司列表 参数列表：[] 访问携带token'
      parameters:
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Company
  /company/get/treelist:
    get:
      consumes:
      - application/json
      description: 'get user''s company tree : 获取当前用户有权限的所有公司信息（以树形结构返回） 参数列表：[] 访问携带token'
      parameters:
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Company
  /device/fixed/create:
    post:
      consumes:
      - multipart/form-data
      description: 'create fixed device  : 创建固定式设备 参数列表：[设备所在的牧舍ID、厂家提供的设备编号、设备类型]
        访问携带token'
      parameters:
      - description: company id
        in: formData
        name: CompanyId
        required: true
        type: string
      - description: device id
        in: formData
        name: DeviceId
        required: true
        type: string
      - description: type name
        in: formData
        name: TypeId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-fixed
  /device/fixed/create_type:
    post:
      consumes:
      - multipart/form-data
      description: 'create fixed device type : 新增固定式设备类型 参数列表：[设备类型]'
      parameters:
      - description: type name
        in: formData
        name: FixedDeviceTypeId
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-fixed
  /device/fixed/delete:
    delete:
      consumes:
      - application/json
      description: 'delete fixed device : 删除固定式设备 参数列表：[设备ID] 访问携带token'
      parameters:
      - description: id
        in: query
        name: Id
        required: true
        type: integer
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-fixed
  /device/fixed/delete_type:
    delete:
      consumes:
      - application/json
      description: 'delete fixed device type : 删除固定式设备类型 参数列表：[设备类型ID] 访问携带token'
      parameters:
      - description: type name
        in: query
        name: FixedDeviceTypeId
        required: true
        type: integer
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-fixed
  /device/fixed/get_auth_list:
    get:
      consumes:
      - application/json
      description: 'get user''s auth fixed device list : 获取当前用户有权限的所有固定式设备信息 参数列表：[]
        访问携带token'
      parameters:
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-fixed
  /device/fixed/get_by_farmhouse:
    get:
      consumes:
      - application/json
      description: 'get all fixed devices by farmhouse : 获取一个牧舍下的所有固定式设备 参数列表：[牧舍ID]
        访问携带token'
      parameters:
      - description: company id
        in: query
        name: CompanyId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-fixed
  /device/fixed/get_fio_latest:
    get:
      consumes:
      - application/json
      description: 'get latest five-in-one device information : 获取五合一传感器的最新数据 参数列表：[五合一传感器的设备ID]
        访问携带token'
      parameters:
      - description: Id
        in: query
        name: Id
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-fixed
  /device/fixed/get_fio_list_by_time:
    get:
      consumes:
      - application/json
      description: 'get five-in-one information within time period : 以时间段作为参数获取五合一传感器的数据列表
        参数列表：[五合一传感器的设备ID、开始时间、结束时间] 访问携带token'
      parameters:
      - description: id
        in: query
        name: Id
        required: true
        type: string
      - description: start time
        in: query
        name: StartTime
        required: true
        type: string
      - description: end time
        in: query
        name: EndTime
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-fixed
  /device/fixed/get_monitor:
    get:
      consumes:
      - application/json
      description: 'get monitor streaming address : 获取摄像头的直播地址 参数列表：[摄像头设备ID] 访问携带token'
      parameters:
      - description: id
        in: query
        name: Id
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-fixed
  /device/fixed/own_list:
    get:
      consumes:
      - application/json
      description: 'get own fixed device list : 获取当前用户拥有的所有固定式设备信息 参数列表：[] 访问携带token'
      parameters:
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device_fixed
  /device/portable/create:
    post:
      consumes:
      - multipart/form-data
      description: 'create portable device : 创建便携式设备 参数列表：[设备绑定的生物ID、厂家提供的设备编号、设备类型]
        访问携带token'
      parameters:
      - description: biology id
        in: formData
        name: BiologyId
        required: true
        type: string
      - description: device id
        in: formData
        name: DeviceId
        required: true
        type: string
      - description: type name
        in: formData
        name: TypeId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-portable
  /device/portable/create_type:
    post:
      consumes:
      - multipart/form-data
      description: 'create portable device type : 新增便携式设备类型 参数列表：[设备类型]'
      parameters:
      - description: type name
        in: formData
        name: PortableDeviceTypeId
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-portable
  /device/portable/delete:
    delete:
      consumes:
      - application/json
      description: 'delete portable device : 删除便携式设备 参数列表：[设备ID] 访问携带token'
      parameters:
      - description: id
        in: query
        name: Id
        required: true
        type: integer
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-portable
  /device/portable/delete_type:
    delete:
      consumes:
      - application/json
      description: 'delete portable device type : 删除便携式设备类型 参数列表：[设备类型ID] 访问携带token'
      parameters:
      - description: type name
        in: query
        name: PortableDeviceTypeId
        required: true
        type: integer
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-portable
  /device/portable/get_by_farmhouse:
    get:
      consumes:
      - application/json
      description: 'get all portable devices by farmhouse : 获取一个牧舍下的所有便携式设备 参数列表：[牧舍ID]
        访问携带token'
      parameters:
      - description: company id
        in: query
        name: CompanyId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-portable
  /device/portable/get_new_collar:
    get:
      consumes:
      - application/json
      description: 'get new-type collar realtime data by device id : 获取中农智联项圈的最新数据
        参数列表：[设备ID] 访问携带token'
      parameters:
      - description: id
        in: query
        name: Id
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device-portable
  /device/portable/own_list:
    get:
      consumes:
      - application/json
      description: 'get own portable device list : 获取当前用户拥有的所有便携式设备信息 参数列表：[] 访问携带token'
      parameters:
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Device_portable
  /fence/create:
    post:
      consumes:
      - multipart/form-data
      description: 'fence create : 创建围栏任务 参数列表：[围栏地理位置、监控的设备列表（设备ID组成）、围栏任务的持续时间、坐标系、围栏任务名、围栏任务所属公司ID]
        访问携带token'
      parameters:
      - description: position
        in: formData
        name: Position
        required: true
        type: string
      - description: device list
        in: formData
        name: DeviceList
        required: true
        type: string
      - description: duration
        in: formData
        name: Duration
        required: true
        type: string
      - description: coordinate
        in: formData
        name: Coordinate
        required: true
        type: string
      - description: name of fence
        in: formData
        name: Name
        required: true
        type: string
      - description: parent id
        in: formData
        name: ParentId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Fence
  /fence/get_active_list:
    get:
      consumes:
      - application/json
      description: 'get active fence list by company id : 获取牧场中所有处于活跃状态的围栏 参数列表：[牧场ID]
        访问携带token'
      parameters:
      - description: company id
        in: query
        name: CompanyId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Fence
  /fence/get_status:
    get:
      consumes:
      - application/json
      description: 'get fence status : 获取围栏任务的执行状态 参数列表：[围栏ID] 访问携带token'
      parameters:
      - description: fence id
        in: query
        name: FenceId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Fence
  /fence/stop:
    delete:
      consumes:
      - application/json
      description: 'fence stop : 终止围栏任务 参数列表：[围栏ID] 访问携带token'
      parameters:
      - description: fence id
        in: query
        name: FenceId
        required: true
        type: integer
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Fence
  /monitorCentor/connect:
    get:
      consumes:
      - application/json
      description: 'connect with monitor centor : 连接到监控中心以接受推送 参数列表：[] 访问携带token'
      parameters:
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - MonitorCentor
  /monitorCentor/disconnect:
    delete:
      consumes:
      - application/json
      description: 'disconnect with monitor centor : 从监控中心断开连接 参数列表：[] 访问携带token'
      parameters:
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - MonitorCentor
  /role/visitor/create:
    post:
      consumes:
      - multipart/form-data
      description: 'add company visitor auth to user : 给指定用户赋予指定公司的访客权限 参数列表：[公司ID、用户ID]
        访问携带token'
      parameters:
      - description: company id
        in: formData
        name: CompanyId
        required: true
        type: string
      - description: user id
        in: formData
        name: UserId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Role
  /role/visitor/delete:
    delete:
      consumes:
      - application/json
      description: 'delete company visitor auth of user : 指定用户的访客权限 参数列表：[公司ID、用户ID]
        访问携带token'
      parameters:
      - description: company id
        in: query
        name: CompanyId
        required: true
        type: integer
      - description: user id
        in: formData
        name: UserId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Role
  /role/visitor/get_company_list:
    get:
      consumes:
      - application/json
      description: 'get user''s visitor company list : 获取当前用户具有访客权限的所有公司 参数列表：[] 访问携带token'
      parameters:
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Role
  /role/visitor/get_list:
    get:
      consumes:
      - application/json
      description: 'get visitor list of company : 获取公司的所有访客 参数列表：[公司ID] 访问携带token'
      parameters:
      - description: company id
        in: query
        name: CompanyId
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
      summary: API of golang gin backend
      tags:
      - Role
  /user/info:
    get:
      consumes:
      - application/json
      description: 'get user information : 获取当前用户的详细信息 参数列表：[] 访问携带token'
      parameters:
      - description: Id
        in: query
        name: Id
        required: true
        type: string
      - description: token
        in: header
        name: Authorization
        required: true
        type: string
      responses:
        "200":
          description: 查询成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
        "400":
          description: 用户信息不存在
          schema:
            $ref: '#/definitions/server.FailureResponse400'
        "401":
          description: 权限不足
          schema:
            $ref: '#/definitions/server.FailureResponse401'
      summary: API of golang gin backend
      tags:
      - User
  /user/login:
    post:
      consumes:
      - multipart/form-data
      description: 'user login : 用户登录 参数列表：[用户名、密码]'
      parameters:
      - description: username
        in: formData
        name: Name
        required: true
        type: string
      - description: password
        in: formData
        name: Password
        required: true
        type: string
      responses:
        "200":
          description: 登录成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
        "422":
          description: 输入参数错误
          schema:
            $ref: '#/definitions/server.FailureResponse422'
        "500":
          description: 系统异常
          schema:
            $ref: '#/definitions/server.FailureResponse500'
      summary: API of golang gin backend
      tags:
      - User
  /user/register:
    post:
      consumes:
      - multipart/form-data
      description: 'user register : 用户注册 参数列表：[用户名、密码、电话号码、邮箱地址]'
      parameters:
      - description: username
        in: formData
        name: Name
        required: true
        type: string
      - description: password
        in: formData
        name: Password
        required: true
        type: string
      - description: telephone
        in: formData
        name: Telephone
        required: true
        type: string
      - description: email
        in: formData
        name: Email
        required: true
        type: string
      responses:
        "200":
          description: 注册成功
          schema:
            $ref: '#/definitions/server.SuccessResponse200'
        "422":
          description: 输入参数错误
          schema:
            $ref: '#/definitions/server.FailureResponse422'
        "500":
          description: 系统异常
          schema:
            $ref: '#/definitions/server.FailureResponse500'
      summary: API of golang gin backend
      tags:
      - User
swagger: "2.0"
